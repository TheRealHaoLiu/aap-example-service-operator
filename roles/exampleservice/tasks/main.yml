---
# tasks file for ExampleService

# Check if aap_ref is provided
- name: Check if aap_ref is provided
  ansible.builtin.set_fact:
    aap_integration_enabled: "{{ aap_ref is defined and aap_ref.name is defined }}"

# Debug aap_ref and aap_integration_enabled
- name: Debug aap_ref and aap_integration_enabled
  ansible.builtin.debug:
    msg:
      - "aap_ref: {{ aap_ref | default('undefined') }}"
      - "aap_integration_enabled: {{ aap_integration_enabled }}"

# Set default service_secret_name to empty if not using AAP integration
- name: Set default service_secret_name
  ansible.builtin.set_fact:
    service_secret_name: ""

# Debug service names and paths
- name: Debug service names and paths
  ansible.builtin.debug:
    msg:
      - "service_name: {{ service_name }}"
      - "service_api_slug: {{ service_api_slug }}"
      - "service_type_name: {{ service_type_name }}"
      - "service_cluster_name: {{ service_cluster_name }}"
      - "service_path: {{ service_path }}"

# AAP Integration tasks
- name: AAP Integration tasks
  when: aap_integration_enabled | bool
  block:
    # Validate that aap_ref is valid
    - name: Validate aap_ref parameter
      ansible.builtin.fail:
        msg: "aap_ref parameter must contain a name"
      when: not aap_ref.name

    # Get AnsibleAutomationPlatform instance
    - name: Get AnsibleAutomationPlatform instance
      kubernetes.core.k8s_info:
        api_version: aap.ansible.com/v1alpha1
        kind: AnsibleAutomationPlatform
        name: "{{ aap_ref.name }}"
        namespace: "{{ aap_ref.namespace | default(ansible_operator_meta.namespace) }}"
      register: aap_instance
      failed_when: aap_instance.resources | length == 0

    # Debug PlatformServiceRegistration template
    - name: Debug PlatformServiceRegistration template
      ansible.builtin.debug:
        msg: "Creating PlatformServiceRegistration with name: {{ ansible_operator_meta.name }}"

    # Create PlatformServiceRegistration CR
    - name: Create PlatformServiceRegistration CR
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('template', 'platform_service_registration.yaml.j2') | from_yaml }}"
      register: psr_result

    # Debug PlatformServiceRegistration result
    - name: Debug PlatformServiceRegistration result
      ansible.builtin.debug:
        msg: "PlatformServiceRegistration result: {{ psr_result }}"

    # # Wait for PlatformServiceRegistration to be completed
    # - name: Wait for PlatformServiceRegistration to be completed
    #   kubernetes.core.k8s_info:
    #     api_version: aap.ansible.com/v1alpha1
    #     kind: PlatformServiceRegistration
    #     name: "{{ ansible_operator_meta.name }}"
    #     namespace: "{{ ansible_operator_meta.namespace }}"
    #   register: psr_status
    #   until:
    #     - psr_status.resources[0].status is defined
    #     - psr_status.resources[0].status.phase is defined
    #     - psr_status.resources[0].status.phase == "Registered"
    #     - psr_status.resources[0].status.serviceSecretName is defined
    #   retries: 30
    #   delay: 10

    # Set service secret name
    - name: Set service secret name
      ansible.builtin.set_fact:
        service_secret_name: "{{ ansible_operator_meta.name }}-service-secret"

# Create Deployment
- name: Create Deployment
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'deployment.yaml.j2') | from_yaml }}"

# Create Service
- name: Create Service
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'service.yaml.j2') | from_yaml }}"

# Create Route (if on OpenShift)
- name: Check if running on OpenShift
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
  register: route_api
  ignore_errors: true

- name: Create Route (if on OpenShift)
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'route.yaml.j2') | from_yaml }}"
  when: route_api is succeeded

# Update ExampleService status
- name: Update ExampleService status with AAP integration
  operator_sdk.util.k8s_status:
    api_version: exampleservice.ansible.com/v1alpha1
    kind: ExampleService
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    status:
      phase: "Deployed"
      platformServiceRegistration: "{{ ansible_operator_meta.name }}"
      serviceSecretName: "{{ service_secret_name }}"
      conditions:
        - type: "Deployed"
          status: "True"
          reason: "ServiceDeployed"
          lastTransitionTime: "{{ lookup('pipe', 'date -u +\"%Y-%m-%dT%H:%M:%SZ\"') }}"
          message: "Service has been deployed and registered with the AAP Gateway"
  when: aap_integration_enabled | bool

- name: Update ExampleService status without AAP integration
  operator_sdk.util.k8s_status:
    api_version: exampleservice.ansible.com/v1alpha1
    kind: ExampleService
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    status:
      phase: "Deployed"
      conditions:
        - type: "Deployed"
          status: "True"
          reason: "ServiceDeployed"
          lastTransitionTime: "{{ lookup('pipe', 'date -u +\"%Y-%m-%dT%H:%M:%SZ\"') }}"
          message: "Service has been deployed without AAP Gateway integration"
  when: not aap_integration_enabled | bool
